<tool id="ludwig_train" name="Ludwig Train" version="@VERSION@" profile="@PROFILE@">
    <description>trains a deep learning model</description>
    <macros>
        <import>ludwig_macros.xml</import>
    </macros>
    <expand macro="python_requirements" />
    <expand macro="macro_stdio" />
    <version_command>echo "@VERSION@"</version_command>
    <command detect_errors="aggressive">
        <![CDATA[
            #if $config
            cp '$config' "`pwd`/config.yml";
            #end if
            #if $dataset
            ln -sf '$dataset' "`pwd`/${dataset.element_identifier}";
            #end if
            #if $training_set
            ln -sf '$training_set' "`pwd`/${training_set.element_identifier}";
            #end if
            #if $validation_set
            ln -sf '$validation_set' "`pwd`/${validation_set.element_identifier}";
            #end if
            #if $test_set
            ln -sf '$test_set' "`pwd`/${test_set.element_identifier}";
            #end if
            #if $raw_data
            unzip -o -q '$raw_data' -d ./;
            #end if
            python '$__tool_directory__/ludwig_train.py'
                #if $config
                --config "`pwd`/config.yml"
                #end if
                #if $model_load_path
                --model_load_path '${model_load_path.extra_files_path}'
                #end if
                #if $dataset
                --dataset "`pwd`/${dataset.element_identifier}"
                #end if
                #if $training_set
                --training_set "`pwd`/${training_set.element_identifier}"
                #end if
                #if $validation_set
                --validation_set "`pwd`/${validation_set.element_identifier}"
                #end if
                #if $test_set
                --test_set "`pwd`/${test_set.element_identifier}"
                #end if
                #if $training_set_metadata
                --training_set_metadata '$training_set_metadata'
                #end if
                #if $disable_parallel_threads
                --disable_parallel_threads
                #end if
                --output_directory "`pwd`"
                --data_format '$data_format'
                --random_seed $random_seed
                --backend local &&
            mkdir -p '${output_model.extra_files_path}' &&
            cp -r experiment_run/model/*.json experiment_run/model/model_weights '${output_model.extra_files_path}' &&
            mkdir -p '$output_report.extra_files_path' &&
            cp experiment_run/*.json '$output_report.extra_files_path' &&
            cp -r visualizations '$output_report.extra_files_path' &&

            echo "Training is Done!"
        ]]>
    </command>
    <configfiles>
        <inputs name="inputs" />
    </configfiles>
    <inputs>
        <param name="config" type="data" format="yaml" label="Select the dataset containing model configuration" />
        <param name="model_load_path" type="data" format="ludwig_model" optional="true" label="Load a pretrained model as initialization" help="Optional." />
        <param name="dataset" type="data" format="tabular,csv,h5,json,txt" optional="true" label="Input dataset" />
        <param name="training_set" type="data" format="tabular,csv,h5,json" optional="true" label="Input traning dataset" />
        <param name="validation_set" type="data" format="tabular,csv,h5,json" optional="true" label="Input validation dataset" />
        <param name="test_set" type="data" format="tabular,csv,h5,json" optional="true" label="Input test dataset" />
        <param name="training_set_metadata" type="data" format="json" optional="true" label="Training set metadata" />
        <param name="data_format" type="select" label="Data format">
            <option value="auto" selected="true">auto</option>
            <option value="tsv">tsv</option>
            <option value="csv">csv</option>
            <option value="h5">h5</option>
            <option value="json">json</option>
        </param>
        <param name="random_seed" type="integer" value="42" label="Randonness seed" />
        <param name="disable_parallel_threads" type="boolean" checked="false" label="Whether to disable parallel threads for reproducibility?" />
        <param name="raw_data" type="data" format="zip" optional="true" label="Raw data" help="Optional. Needed for images."/>
    </inputs>       
    <outputs>
        <data format="ludwig_model" name="output_model" label="${tool.name} model on ${on_string}" />
        <data format="html" name="output_report" from_work_dir="smart_report.html" label="${tool.name} report on ${on_string}" />
    </outputs>
    <tests>
        <test>
            <param name="dataset" value="temperature_la.csv" ftype="csv" />
            <param name="config" value="temperature_config.yml" ftype="yaml" />
            <param name="data_format" value="csv" />
            <output name="output_report" file="temperature_train_report.html" compare="sim_size" delta="10" />
            <output name="output_model" >
                <extra_files type="file" name="model_hyperparameters.json" value="temp_model01/model_hyperparameters.json" compare="diff" />
                <extra_files type="file" name="model_weights" value="temp_model01/model_weights" compare="sim_size" delta="1000" />
                <extra_files type="file" name="training_set_metadata.json" value="temp_model01/training_set_metadata.json" compare="sim_size" delta="200"/>
                <extra_files type="file" name="training_progress.json" value="temp_model01/training_progress.json" compare="sim_size" delta="50" />
            </output>
        </test>
    </tests>
    <help>
        <![CDATA[
**What it does**
Train a model.


**Output**
One trained ludwig_model type composite dataset.
One html containing the training report.


        ]]>
    </help>
    <expand macro="macro_citations" />
</tool>
